import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.4719a631.js";const p="/assets/WechatIMG586.fb9c2d23.jpeg",g=JSON.parse('{"title":"1 React 概念","description":"","frontmatter":{},"headers":[],"relativePath":"documents/computer-science/Front-end/React.md","filePath":"documents/computer-science/Front-end/React.md"}'),o={name:"documents/computer-science/Front-end/React.md"},e=l(`<p>React</p><h1 id="_1-react-概念" tabindex="-1">1 React 概念 <a class="header-anchor" href="#_1-react-概念" aria-label="Permalink to &quot;1 React 概念&quot;">​</a></h1><p>###1.1 组件化概念</p><p>组件的特点：</p><ul><li>可组合</li><li>可重用</li><li>可维护，每个组件仅包含自身逻辑，方便维护</li></ul><h1 id="_2-jsx-语法" tabindex="-1">2 JSX 语法 <a class="header-anchor" href="#_2-jsx-语法" aria-label="Permalink to &quot;2 JSX 语法&quot;">​</a></h1><p>###2.1 虚拟 DOM</p><ul><li><p>简介</p><p>react 利用 Babel，将 JSX 语法在编译阶段编译成 js 对象，然后在执行阶段再执行函数，生成真实 DOM</p></li><li><p>虚拟 DOM 生成过程</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">&gt;Hello, World&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;, document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在上述jsx语句中，利用babel会编译成</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">( </span><span style="color:#6A737D;">/*#__PURE__*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h1&quot;</span><span style="color:#E1E4E8;">, {title: </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;Hello, World&quot;</span><span style="color:#E1E4E8;">), document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 然后生成虚拟DOM</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;h1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;title&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Hello, World&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">&gt;Hello, World&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;, document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在上述jsx语句中，利用babel会编译成</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">( </span><span style="color:#6A737D;">/*#__PURE__*/</span></span>
<span class="line"><span style="color:#24292E;">  React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h1&quot;</span><span style="color:#24292E;">, {title: </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;Hello, World&quot;</span><span style="color:#24292E;">), document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 然后生成虚拟DOM</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;h1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;title&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Hello, World&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>虚拟 DOM 中的 children</p><p>虚拟 DOM 中的 children</p></li></ul><h1 id="react-hooks" tabindex="-1">React Hooks <a class="header-anchor" href="#react-hooks" aria-label="Permalink to &quot;React Hooks&quot;">​</a></h1><blockquote><p>React Hooks 理念参考视频：</p><p><a href="https://www.bilibili.com/video/BV1Ge411W7Ra?from=search&amp;seid=8648670450944923695" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1Ge411W7Ra?from=search&amp;seid=8648670450944923695</a></p><p>React Hooks 面试参考视频：</p><p><a href="https://www.bilibili.com/video/BV1cE411i7F1/?spm_id_from=333.788.recommend_more_video.-1" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1cE411i7F1/?spm_id_from=333.788.recommend_more_video.-1</a></p><p>React Hooks 函数式因变量自变量理解</p><p><a href="https://www.bilibili.com/video/BV1JU4y1E73v/?spm_id_from=333.788.recommend_more_video.10" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1JU4y1E73v/?spm_id_from=333.788.recommend_more_video.10</a></p></blockquote><p>简单笔记</p><p>react hooks 是用于帮助函数式组件管理状态以及一些异步操作的东西</p><h2 id="理念" tabindex="-1">理念 <a class="header-anchor" href="#理念" aria-label="Permalink to &quot;理念&quot;">​</a></h2><p>####传统逻辑</p><p>先从传统逻辑看起，假设要控制一个弹框的展示，按照传统逻辑，需要进行如下操作</p><ol><li>先 document.getElementById 获取弹框组件的 DOM 对象</li><li>然后，通过设置类名 class，来控制弹框的展示与否</li></ol><p>在这种方式下，如果交互变得复杂起来，那么就需要控制大量的 DOM，非常难以维护</p><p>####现代逻辑</p><p>在上述传统逻辑下，诞生了现代逻辑下的核心思想——<strong>数据驱动视图</strong></p><p>还是上述的弹框例子，因为 react 区分了数据层和 UI 层，那么，当数据发生变化，就会自动驱动视图 UI 发生改变，所以后续只需要更多关注数据的变化即可</p><p><img src="`+p+`" alt="WechatIMG586"></p><h3 id="hooks" tabindex="-1">hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;hooks&quot;">​</a></h3><p>要理解 react hooks，首先，要先理解几个概念。</p><p>UI 可以理解为<strong>视图，数据，行为</strong>的结合，视图就是最终渲染后展示给用户看的页面，数据就是用于填充视图的内容，行为，则是在视图上出现的各种能对状态进行改变的方式。</p><p>视图对应界面，数据对应状态及状态的改变，而行为，就是各种 hooks</p><p>有极大影响。是状态驱动视图进行改变，而不在视图上展示的内容，比如 console.log 等，则称之为作用。</p><p><strong>#hooks 的函数式理解</strong>（卡颂版）</p><p>useState, useReducer, useContext 都是自变量，会自身改变</p><p>useMemo, useCallback 属于因变量，因自变量改变而改变</p><p>useEffect 属于副作用</p><p>useRef 属于自变量引起视图更新等的过程中，起到一个监控作用</p><h2 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h2><p><strong>思想</strong></p><p><em>useState 的思想：因为 hooks 的核心逻辑是<strong>数据驱动视图</strong>，所以，使用 state 存放的数据有自身的特性，那就是能够驱动对应的 UI 发生变化，而其他与 UI 变化没有关系的数据，就尽量不要使用 state 来存放</em></p><ol><li><p>说明：</p><p>管理状态方面，有 useState 函数，直接写在函数式组件当中，入参是当前需要存储的状态的初始值，返回值是一个数组，第一项是对应的状态名，第二项是对状态的管理函数，例如</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setCount</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setCount</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span></code></pre></div><p>意思即为保存一个名为 count 的状态，初始值为 0，且给与其一个 setcount 的变化函数，如需改变 count 值，则可以使用 setCount</p></li><li><p><strong>注意点</strong>：有时候因为取不到最新的值的关系，setCount 可能会一直拿 count 的初始值进行操作，此时可以改写成：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setCount</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">setCount</span><span style="color:#E1E4E8;">(count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="color:#B392F0;">setCount</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 设置函数定义域，推荐</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setCount</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">setCount</span><span style="color:#24292E;">(count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="color:#6F42C1;">setCount</span><span style="color:#24292E;">((</span><span style="color:#E36209;">count</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 设置函数定义域，推荐</span></span></code></pre></div></li></ol><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h2><p><strong>思想</strong></p><p><em>useEffect 的思想：可以理解为是超脱于视图之外的一些行为，比如 console.log，这些东西不会影响到视图的变化，但是却在后台默默影响，这类行为被称为副作用 effect，副作用可以有依附值，依附于谁而变，如果依附一个常量，那么就只会调用一次，因为常量并不会发生状态的变化</em>，所以，useEffect 可以当做 componentDidMount 来使用</p><ol><li><p>说明：</p><p>useEffect 参数为函数，他可以返回一个函数，返回的函数将会在组件被重新渲染之后执行，类似 componentWillUnmount，它还可以传入第二个参数，例如[count]， 用于监听，当 Mount 状态发生改变的时候，才会进行调用，而不是每次页面刷新都进行一次新的调用</p></li><li><p>代码示例：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新文档的标题</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`You clicked \${</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} times\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, [count]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新文档的标题</span></span>
<span class="line"><span style="color:#24292E;">  document.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`You clicked \${</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} times\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}, [count]);</span></span></code></pre></div></li></ol><blockquote><p>详细笔记待补充</p></blockquote><h2 id="uselayouteffect" tabindex="-1">useLayoutEffect <a class="header-anchor" href="#uselayouteffect" aria-label="Permalink to &quot;useLayoutEffect&quot;">​</a></h2><p>与上面的 useEffect 类似，</p><h2 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">​</a></h2><blockquote><p>参考文档：</p><p><a href="https://blog.csdn.net/weixin_43606158/article/details/100750602" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_43606158/article/details/100750602</a></p></blockquote><p><strong>思想</strong></p><p><em>useContext 的思想，可以理解为是一种大家共知共解的一种背景关系，在这个大背景下，其中的一些公共的知识，公共的方法，都是被大家所熟知的，例如：大背景是现代社会，那么这个大背景下，会存在诸如玩手机等方法，也存在身高、体重等属性，每个需要这些方法和属性的人，都可以直接通过大背景.属性的方式进行调用</em></p><ol><li><p>说明：useContext 意思是创建上下文，在代码中一般用于给不同的组件之间传递一些公共的值，实现组件中的值共享</p></li><li><p>简而言之的使用思路</p><p>① 先 createContext()创建一个上下文环境</p><p>② 使用 provider 包裹住子组件并传值</p><p>③ 子组件使用 useContext 指定上下文后，解构出所需的值直接使用</p></li><li><p>代码实现如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 要使用上下文，第一步就是先创建一个上下文，当然，其中是可以传值的</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TestContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">createContext</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二步，使用上下文提供的provider，实现定义共享的一些上下文值，并且包裹住需要使用这些值的子组件</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">TestContext.Provider</span></span>
<span class="line"><span style="color:#E1E4E8;">      value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;superawesome&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    		</span><span style="color:#B392F0;">toggle</span><span style="color:#E1E4E8;">: ()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    			console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Im a function&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  			}</span></span>
<span class="line"><span style="color:#E1E4E8;">      }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Navbar </span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 此处Navbar和Messages被上下文包裹，可以直接拿到上下文提供的username</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Messages </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">TestContext.Provider</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第三步，子组件中从上下文中解构出所需的参数，并使用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Navbar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useContext</span><span style="color:#E1E4E8;">(TestContext)	</span><span style="color:#6A737D;">// 此处useContext需要指明获取的是哪个context的值，因为组件可以同时被多个context包裹</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;navbar&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;">&gt;{username}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 同理，另一个子组件也可以获取到所需的参数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Messages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useContext</span><span style="color:#E1E4E8;">(TestContext)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;messages&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> message for {</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 要使用上下文，第一步就是先创建一个上下文，当然，其中是可以传值的</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TestContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">createContext</span><span style="color:#24292E;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二步，使用上下文提供的provider，实现定义共享的一些上下文值，并且包裹住需要使用这些值的子组件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">TestContext.Provider</span></span>
<span class="line"><span style="color:#24292E;">      value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;superawesome&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    		</span><span style="color:#6F42C1;">toggle</span><span style="color:#24292E;">: ()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    			console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Im a function&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  			}</span></span>
<span class="line"><span style="color:#24292E;">      }}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Navbar </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 此处Navbar和Messages被上下文包裹，可以直接拿到上下文提供的username</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Messages </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">TestContext.Provider</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第三步，子组件中从上下文中解构出所需的参数，并使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Navbar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">username</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useContext</span><span style="color:#24292E;">(TestContext)	</span><span style="color:#6A737D;">// 此处useContext需要指明获取的是哪个context的值，因为组件可以同时被多个context包裹</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;navbar&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">&gt;{username}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 同理，另一个子组件也可以获取到所需的参数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Messages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">username</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useContext</span><span style="color:#24292E;">(TestContext)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;messages&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">&gt;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> message for {</span><span style="color:#E36209;">username</span><span style="color:#24292E;">}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ol><h2 id="usereducer" tabindex="-1">useReducer <a class="header-anchor" href="#usereducer" aria-label="Permalink to &quot;useReducer&quot;">​</a></h2><ol><li><p>说明</p><p>useRududer 类似于 useState，但是 state 仅仅单独设置值，但是 useReducer 可以根据 dispatch 进来的不同值进行不同的一番处理</p></li><li><p>使用方法</p><p>① 引入 useReducer</p><p>② 声明 useReducer，其中包含了两个参数，第一个 reducer 是处理数据的 reducer 函数，第二个是初始值，初始值可为基本数据类型，也可为函数或对象。其中，const 两个参数，一个是数据变量本身，一个是 dispatch 方法，用于给 reducer 函数传入不同的类型</p><p>③ 在需要改变数据变量的时候，触发 dispatch 事件，传入不同的 type 值</p><p>④ 编写 reducer 函数，reducer 函数接收两个参数，第一个是 state，状态值，也就是 useReducer 中的第二个参数，第二个是 action，是 dispatch 传过来的参数</p><p>⑤ 使用 switch...case...进行不同逻辑不同处理，将 state 的新值以返回值的形式返回出去即可</p></li><li><p>代码示例如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useReducer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reducer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 注意，顺序一定不能反！！！</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state); </span><span style="color:#6A737D;">// {count:0}，此处state为useReducer第二个参数初始值</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(action); </span><span style="color:#6A737D;">// {type:&#39;plus&#39;/&#39;minus&#39;}， 此处为dispatch中传入的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (action.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;plus&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回值要是新的state的值，所以一定要和state的数据结构保持一致，底下state为number，那么返回值也要是一个number，如果是一个Object，那么返回值也要是一个Object</span></span>
<span class="line"><span style="color:#E1E4E8;">        count: state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;minus&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count: state.count </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReducerDemo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// const第一个参数为变量名，第二个为dispatch函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// useReducer第一个参数为reducer函数，可以直接写，也可以抽出去，第二个为counter的初始值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">counter</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dispatch</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useReducer</span><span style="color:#E1E4E8;">(reducer, { count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">&gt;counter is {</span><span style="color:#FFAB70;">counter</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">button onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() =&gt; </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;plus&quot;</span><span style="color:#E1E4E8;"> })}</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">plus</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">button</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">button onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() =&gt; </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;minus&quot;</span><span style="color:#E1E4E8;"> })}</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">minus</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">button</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 上面的dispatch写成的是返回值的形式，也可以将dispatch写进函数体，也能实现，如下</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#FFAB70;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">        onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&quot;plus&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }}</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">plus</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">button</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#FFAB70;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">        onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&quot;minus&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }}</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">minus</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">button</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useReducer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reducer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 注意，顺序一定不能反！！！</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(state); </span><span style="color:#6A737D;">// {count:0}，此处state为useReducer第二个参数初始值</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(action); </span><span style="color:#6A737D;">// {type:&#39;plus&#39;/&#39;minus&#39;}， 此处为dispatch中传入的参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (action.type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;plus&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回值要是新的state的值，所以一定要和state的数据结构保持一致，底下state为number，那么返回值也要是一个number，如果是一个Object，那么返回值也要是一个Object</span></span>
<span class="line"><span style="color:#24292E;">        count: state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;minus&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count: state.count </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReducerDemo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// const第一个参数为变量名，第二个为dispatch函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// useReducer第一个参数为reducer函数，可以直接写，也可以抽出去，第二个为counter的初始值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">counter</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dispatch</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useReducer</span><span style="color:#24292E;">(reducer, { count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">&gt;counter is {</span><span style="color:#E36209;">counter</span><span style="color:#24292E;">.</span><span style="color:#E36209;">count</span><span style="color:#24292E;">}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">button onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() =&gt; </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;plus&quot;</span><span style="color:#24292E;"> })}</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">plus</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">button</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">button onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() =&gt; </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;minus&quot;</span><span style="color:#24292E;"> })}</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">minus</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">button</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 上面的dispatch写成的是返回值的形式，也可以将dispatch写进函数体，也能实现，如下</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#E36209;">button</span></span>
<span class="line"><span style="color:#24292E;">        onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&quot;plus&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">        }}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">plus</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">button</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#E36209;">button</span></span>
<span class="line"><span style="color:#24292E;">        onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&quot;minus&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">        }}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">minus</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">button</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ol><h2 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h2><ol><li><p>说明</p><p>useRef 一般由两种用法，要么用来操作 DOM，要么用于保持变量的引用</p></li><li><p>功能</p><p>比如，点击按钮，获取 input 框的焦点。还可以用于父子组件传值，父组件调用子组件的方法</p></li></ol><h2 id="usememo" tabindex="-1">useMemo <a class="header-anchor" href="#usememo" aria-label="Permalink to &quot;useMemo&quot;">​</a></h2><blockquote><ol><li><p>useMemo 和 useEffect: <a href="https://www.jianshu.com/p/94ace269414d" target="_blank" rel="noreferrer">https://www.jianshu.com/p/94ace269414d</a></p></li><li><p>useMemo 和 useCallback: <a href="https://blog.csdn.net/sinat_17775997/article/details/94453167" target="_blank" rel="noreferrer">https://blog.csdn.net/sinat_17775997/article/details/94453167</a></p></li></ol></blockquote><ol><li><p>说明</p><p>useMemo 和 useCallback 都会在组件第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行（<strong>因为组件挂载时只调用一次，所以，可以解决某些逻辑重复运行的问题，提高性能</strong>）；并且这两个 hooks 都返回缓存的值，useMemo 返回缓存的变量，useCallback 返回缓存的函数。</p></li><li><p>功能</p><p>可以实现和 useSate 类似的功能，如上面描述。此外，useMemo 保存的数据可以当做缓存</p></li><li><p><strong>useEffect 和 useMemo</strong></p><p>useMemo 和 useEffect 写法类似，可见下。</p><p>useMemo 和 useEffect 的区别在于，<strong>useMemo 是在渲染时触发的，useEffect 是渲染后触发的</strong></p><p>所以！<strong>在 useMemo 中不能进行 setState 的操作！</strong>，因为 usememo 是渲染时触发，而 setstate 会再次触发渲染造成死循环。</p><p>按生命周期理解的话，<strong>useMemo 相当于 shouldComponentUpdate，useEffect 相当于 componentDidMount</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useState, useMemo, useEffect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReducerDemo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setName</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bill&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">age</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setAge</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">memolize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useMemo</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name change for memo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [name]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name change for effect&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [name]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#FFAB70;">memoDemo</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      count is {</span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">} right </span><span style="color:#FFAB70;">now</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#FFAB70;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">        onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }}</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">add</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">button</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在此案例中，点击按钮，造成age的+1，会触发effect的更新，因为effect是在页面渲染后执行，age更新触发页面更新，页面更新带动name更新，所以会带动effect更新，但是useMemo是在渲染过程中执行的，所以并不会被触发</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useState, useMemo, useEffect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReducerDemo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">name</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setName</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bill&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">age</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setAge</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">memolize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useMemo</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name change for memo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }, [name]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name change for effect&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }, [name]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#E36209;">memoDemo</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      count is {</span><span style="color:#E36209;">count</span><span style="color:#24292E;">} right </span><span style="color:#E36209;">now</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#E36209;">button</span></span>
<span class="line"><span style="color:#24292E;">        onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">((</span><span style="color:#E36209;">age</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">add</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">button</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在此案例中，点击按钮，造成age的+1，会触发effect的更新，因为effect是在页面渲染后执行，age更新触发页面更新，页面更新带动name更新，所以会带动effect更新，但是useMemo是在渲染过程中执行的，所以并不会被触发</span></span></code></pre></div></li></ol><h2 id="usecallback" tabindex="-1">useCallback <a class="header-anchor" href="#usecallback" aria-label="Permalink to &quot;useCallback&quot;">​</a></h2><p>笔记待补充</p><h2 id="memo-effect-callback-区别" tabindex="-1">memo, effect, callback 区别 <a class="header-anchor" href="#memo-effect-callback-区别" aria-label="Permalink to &quot;memo, effect, callback 区别&quot;">​</a></h2><blockquote><p>三者区别：</p><p>参考文档：<a href="https://juejin.cn/post/7008433550307360798" target="_blank" rel="noreferrer">https://juejin.cn/post/7008433550307360798</a></p></blockquote><h2 id="父子组件通信" tabindex="-1">父子组件通信 <a class="header-anchor" href="#父子组件通信" aria-label="Permalink to &quot;父子组件通信&quot;">​</a></h2><blockquote><p><a href="https://www.cnblogs.com/art-poet/p/13269408.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/art-poet/p/13269408.html</a></p></blockquote><h3 id="子组件调用父组件方法" tabindex="-1">子组件调用父组件方法 <a class="header-anchor" href="#子组件调用父组件方法" aria-label="Permalink to &quot;子组件调用父组件方法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 父组件方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">changePage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 父组件jsx部分</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">PageChange</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">currentPage</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{currentPage} </span><span style="color:#B392F0;">changePage</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{changePage}&gt;&lt;/</span><span style="color:#79B8FF;">PageChange</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子组件props接受方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">changePage</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子组件jsx，利用bind可以进行传参</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{ss.changeBtn} </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{changePage.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;next&quot;</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  下一页</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 父组件方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">changePage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">type</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 父组件jsx部分</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">PageChange</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">currentPage</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{currentPage} </span><span style="color:#6F42C1;">changePage</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{changePage}&gt;&lt;/</span><span style="color:#005CC5;">PageChange</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子组件props接受方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">changePage</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子组件jsx，利用bind可以进行传参</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{ss.changeBtn} </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{changePage.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;next&quot;</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">  下一页</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span></code></pre></div><h3 id="父组件调用子组件方法" tabindex="-1">父组件调用子组件方法 <a class="header-anchor" href="#父组件调用子组件方法" aria-label="Permalink to &quot;父组件调用子组件方法&quot;">​</a></h3><p>使用 useRef</p><h1 id="react-开发过程中碰到的问题" tabindex="-1">React 开发过程中碰到的问题 <a class="header-anchor" href="#react-开发过程中碰到的问题" aria-label="Permalink to &quot;React 开发过程中碰到的问题&quot;">​</a></h1><p>###函数式组件 input 失焦</p><p>问题详述：函数式组件中，input 输入某些内容，根据输入的内容控制改组件某个子组件的展示，因为子组件的添加触发了父组件的更新渲染，会导致 input 的键盘收回</p><p>问题代码片段：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">show</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setShow</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">onChange(e=&gt;{</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">setShow(true)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">})</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Son1</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">Son1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    show &amp;&amp; (&lt;</span><span style="color:#79B8FF;">Son2</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">Son2</span><span style="color:#E1E4E8;">&gt;)</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> // 该案例中，因为input变化，setShow为true，导致组件Son2被渲染，触发组件更新，键盘被收回</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">show</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setShow</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">onChange(e=&gt;{</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">setShow(true)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">})</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Son1</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">Son1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    show &amp;&amp; (&lt;</span><span style="color:#005CC5;">Son2</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">Son2</span><span style="color:#24292E;">&gt;)</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> // 该案例中，因为input变化，setShow为true，导致组件Son2被渲染，触发组件更新，键盘被收回</span></span></code></pre></div><p>解决办法：</p><p>令子组件自行控制自己的展示与否，这样就不会波及到父组件的更新，相关代码片段如下</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">show</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setShow</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">onChange(e=&gt;{</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">setShow(true)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">})</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Son1</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">Son1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Son2</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isShow</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{show}&gt;&lt;/</span><span style="color:#79B8FF;">Son2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">show</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setShow</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">onChange(e=&gt;{</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">setShow(true)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">})</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Son1</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">Son1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Son2</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isShow</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{show}&gt;&lt;/</span><span style="color:#005CC5;">Son2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div>`,72),t=[e];function c(r,E,y,i,u,F){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{g as __pageData,h as default};
