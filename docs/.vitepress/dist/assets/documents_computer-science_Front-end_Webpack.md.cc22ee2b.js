import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4719a631.js";const F=JSON.parse('{"title":"1 前端模块化","description":"","frontmatter":{},"headers":[],"relativePath":"documents/computer-science/Front-end/Webpack.md","filePath":"documents/computer-science/Front-end/Webpack.md"}'),p={name:"documents/computer-science/Front-end/Webpack.md"},o=l(`<p>Webpack</p><h1 id="_1-前端模块化" tabindex="-1">1 前端模块化 <a class="header-anchor" href="#_1-前端模块化" aria-label="Permalink to &quot;1 前端模块化&quot;">​</a></h1><h2 id="_1-1-早期模块化实现" tabindex="-1">1.1 早期模块化实现 <a class="header-anchor" href="#_1-1-早期模块化实现" aria-label="Permalink to &quot;1.1 早期模块化实现&quot;">​</a></h2><p>由于 js 的语言特性，var 变量是直接挂载到 window 的顶级对象上，早期写 js 代码的时候，用 export 导出，再在总的 app.js 中导入的时候，很容易就出现了变量命名冲突的问题，而当初，js 并没有 let 这种定义特定作用域的语法，所以，如果当时要解决命名冲突的问题，往往人们使用导出一个对象的方式</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;Leo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Leo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>这样，导入该文件后，就可以直接使用 a.name，a.age 调用属性，解决变量命名冲突的问题</p><p>但是，这种方法也有一个弊端，那就是整个对象完全暴露在外，可以通过点属性，获取任意属性的值并进行修改，十分不安全，考虑到函数具有<strong>单独的作用域</strong>，于是，早起的模块化逻辑就出现了，即使用——<strong>立即执行函数</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">window</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2.使用函数自调用，形成一个专属作用域，并接受window全局对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Leo&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">introduce</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My name is&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.introduce </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> introduce; </span><span style="color:#6A737D;">// 3.将函数作用域内需要暴露出去的属性或者方法，挂载到window上</span></span>
<span class="line"><span style="color:#E1E4E8;">})(window); </span><span style="color:#6A737D;">// 1.传入window全局对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">window</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2.使用函数自调用，形成一个专属作用域，并接受window全局对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Leo&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">introduce</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My name is&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  window.introduce </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> introduce; </span><span style="color:#6A737D;">// 3.将函数作用域内需要暴露出去的属性或者方法，挂载到window上</span></span>
<span class="line"><span style="color:#24292E;">})(window); </span><span style="color:#6A737D;">// 1.传入window全局对象</span></span></code></pre></div><h2 id="_1-2-模块化优点" tabindex="-1">1.2 模块化优点 <a class="header-anchor" href="#_1-2-模块化优点" aria-label="Permalink to &quot;1.2 模块化优点&quot;">​</a></h2><ul><li>作用域封装</li><li>代码重用</li><li>解除耦合</li></ul><h2 id="_1-3-模块化进化过程" tabindex="-1">1.3 模块化进化过程 <a class="header-anchor" href="#_1-3-模块化进化过程" aria-label="Permalink to &quot;1.3 模块化进化过程&quot;">​</a></h2><blockquote><p>详细的模块化语法可见 ES6.md 中的模块化笔记</p></blockquote><ul><li>commonJs</li><li>AMD</li><li>ES6 Module（export/ import）</li></ul><h1 id="_2-webpack-打包机制" tabindex="-1">2 Webpack 打包机制 <a class="header-anchor" href="#_2-webpack-打包机制" aria-label="Permalink to &quot;2 Webpack 打包机制&quot;">​</a></h1><blockquote><p>先简单讲一下打包的原理，关于 webpack 的源码，可后续做笔记补充！</p></blockquote><p>Webpack 的打包机制其实和 1.1 中所提到的立即执行函数是一样的！</p><p>其中打包过程为</p><ol><li><strong>从入口文件开始，分析整个应用的依赖树</strong>，入口文件中会 import 各种项目中的文件，层层依赖相套，webpack 要做的，就是分析，并整理成一个依赖树</li><li><strong>将每个依赖模块包装起来，放到一个数组中等待调用</strong>，按照上面的说法，webpack 本质是一个立即执行函数，那么，依赖树数组，就会是该立即执行函数的入参</li><li><strong>实现模块加载的方法，并把它放到模块执行的环境中，确保模块间可以互相调用</strong></li><li><strong>把执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</strong>，由此，便会开始不断层层调用，实现项目的运行</li></ol><p>主要打包过程代码展示：<em>结合 1.1 中立即执行函数看，更容易懂</em></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){	</span><span style="color:#6A737D;">// 本身是一个立即执行函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};	</span><span style="color:#6A737D;">// 设置一个对象，用于存储已经加载过的模块内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_webpack_require_</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduled</span><span style="color:#E1E4E8;">){	</span><span style="color:#6A737D;">// 核心内容，用于检查模块是否加载过，若加载过，返回，若没有，则将该模块放进installedModules中，防止二次加载，同时，执行该模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*code*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// other code content...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_webpack_require_</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)	</span><span style="color:#6A737D;">// entry file 返回值是入口文件，此时webpack将会直接调用入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">})([</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">modules array</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){	</span><span style="color:#6A737D;">// 本身是一个立即执行函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> installedModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};	</span><span style="color:#6A737D;">// 设置一个对象，用于存储已经加载过的模块内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_webpack_require_</span><span style="color:#24292E;">(</span><span style="color:#E36209;">moduled</span><span style="color:#24292E;">){	</span><span style="color:#6A737D;">// 核心内容，用于检查模块是否加载过，若加载过，返回，若没有，则将该模块放进installedModules中，防止二次加载，同时，执行该模块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*code*/</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// other code content...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_webpack_require_</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)	</span><span style="color:#6A737D;">// entry file 返回值是入口文件，此时webpack将会直接调用入口文件</span></span>
<span class="line"><span style="color:#24292E;">})([</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">modules array</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">])</span></span></code></pre></div><p>具体的_webpack<em>require</em>(moduleid)函数就不细致展开写了，详情可以参考视频资料</p><blockquote><p>webpack 课程，第 55 分钟开始</p><p><a href="https://www.bilibili.com/video/BV1a741197Hn/?spm_id_from=333.788.recommend_more_video.-1" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1a741197Hn/?spm_id_from=333.788.recommend_more_video.-1</a></p></blockquote><h1 id="_3-package-json" tabindex="-1">3 package.json <a class="header-anchor" href="#_3-package-json" aria-label="Permalink to &quot;3 package.json&quot;">​</a></h1><h2 id="_3-1-语义化版本" tabindex="-1">3.1 语义化版本 <a class="header-anchor" href="#_3-1-语义化版本" aria-label="Permalink to &quot;3.1 语义化版本&quot;">​</a></h2><ul><li><p>^version：保证中版本和小版本</p><p>^1.0.1 --&gt; 1.x.x</p></li><li><p>~version：保证小版本</p><p>^1.0.1 --&gt; 1.0.x</p></li></ul><h1 id="_4-webpack-config-json" tabindex="-1">4 webpack.config.json <a class="header-anchor" href="#_4-webpack-config-json" aria-label="Permalink to &quot;4 webpack.config.json&quot;">​</a></h1><h2 id="_4-1-核心概念" tabindex="-1">4.1 核心概念 <a class="header-anchor" href="#_4-1-核心概念" aria-label="Permalink to &quot;4.1 核心概念&quot;">​</a></h2><ol><li><p>webpack 的默认配置文件是<strong>webpack.config.json</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 整体一览------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.export </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 指定输出的目录，目录必须为绝对路径，不能是相对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;main.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定输出的文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#9ECBFF;">&quot;source-map&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span><span style="color:#9ECBFF;">&quot;style-loader&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;css-loader&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 例如此处，先执行css-loader再实行style-loader</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 整体一览------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.export </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;dist&quot;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 指定输出的目录，目录必须为绝对路径，不能是相对路径</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&quot;main.js&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 指定输出的文件名</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  devtool: </span><span style="color:#032F62;">&quot;source-map&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span><span style="color:#032F62;">&quot;style-loader&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;css-loader&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 例如此处，先执行css-loader再实行style-loader</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li><li><p><strong>entry</strong></p><p>用于指定 webpack 的入口文件，从哪个文件开始打包，如果不设置，则默认为 src/index.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div></li><li><p><strong>output</strong></p><p>用于指定项目打包的输出，默认为 dist</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">), 		</span><span style="color:#6A737D;">// 指定输出的目录，目录必须为绝对路径，不能是相对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">filename</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;main.js&#39;</span><span style="color:#E1E4E8;">, 	</span><span style="color:#6A737D;">// 指定输出的文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">output</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">), 		</span><span style="color:#6A737D;">// 指定输出的目录，目录必须为绝对路径，不能是相对路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">filename</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;main.js&#39;</span><span style="color:#24292E;">, 	</span><span style="color:#6A737D;">// 指定输出的文件名</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p><strong>mode</strong></p><p>代表当前编译的环境</p><p>有三个值【none, development, production】，默认为 production，会对代码进行压缩，development 则不会</p></li><li><p><strong>devtool</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">devtool</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;source-map&#39;</span><span style="color:#E1E4E8;">,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">devtool</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;source-map&#39;</span><span style="color:#24292E;">,</span></span></code></pre></div></li><li><p><strong>module</strong></p><p>webpack 只能打包 js 和 json 文件，其他类型，如 css, sass, less 等需要编译器协助打包，前提，<strong>需要先下载依赖包 style-loader 和 css-loader</strong></p><ul><li><p>rules</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 用于给指定文件后缀名的文件添加loader协助编译，loader执行顺序从右到左</span></span>
<span class="line"><span style="color:#B392F0;">module</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rules</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      use: [</span><span style="color:#9ECBFF;">&quot;style-loader&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;css-loader&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 例如此处，先执行css-loader再实行style-loader</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用于给指定文件后缀名的文件添加loader协助编译，loader执行顺序从右到左</span></span>
<span class="line"><span style="color:#6F42C1;">module</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">rules</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      use: [</span><span style="color:#032F62;">&quot;style-loader&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;css-loader&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 例如此处，先执行css-loader再实行style-loader</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul></li><li></li></ol>`,28),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
