import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4719a631.js";const p="/assets/page.0e0d5a64.png",u=JSON.parse('{"title":"H5","description":"","frontmatter":{},"headers":[],"relativePath":"documents/computer-science/Front-end/HTML5.md","filePath":"documents/computer-science/Front-end/HTML5.md"}'),o={name:"documents/computer-science/Front-end/HTML5.md"},e=l('<h1 id="h5" tabindex="-1">H5 <a class="header-anchor" href="#h5" aria-label="Permalink to &quot;H5&quot;">​</a></h1><h2 id="h5-语义化标签" tabindex="-1">h5 语义化标签 <a class="header-anchor" href="#h5-语义化标签" aria-label="Permalink to &quot;h5 语义化标签&quot;">​</a></h2><blockquote><p>参考文档：页面结构语义化</p><p><a href="https://rainylog.com/post/ife-note-1/" target="_blank" rel="noreferrer">https://rainylog.com/post/ife-note-1/</a></p></blockquote><h3 id="_1-语义化标签的好处" tabindex="-1">1 语义化标签的好处 <a class="header-anchor" href="#_1-语义化标签的好处" aria-label="Permalink to &quot;1 语义化标签的好处&quot;">​</a></h3><ol><li>易修改、易维护。</li><li>无障碍阅读支持。</li><li>搜索引擎友好，利于 SEO。</li><li>面向未来的 HTML，浏览器在未来可能提供更丰富的支持。</li></ol><h3 id="_2-结构语义化" tabindex="-1">2 结构语义化 <a class="header-anchor" href="#_2-结构语义化" aria-label="Permalink to &quot;2 结构语义化&quot;">​</a></h3><p>结构语义化方便阅读代码以及理解页面结构，如下图</p><p><img src="'+p+`" alt="page"></p><p>其中，&lt;figure&gt;标签用于包裹插图，&lt;figcaption&gt;用于对所含图片进行描述说明，类似 alt 属性</p><h2 id="文字类标签" tabindex="-1">文字类标签 <a class="header-anchor" href="#文字类标签" aria-label="Permalink to &quot;文字类标签&quot;">​</a></h2><p>h1~h6,p 都是常见的块级元素文字类标签。他们有个特点如下：</p><p>只有文字才能组成段落，因此 <p></p>标签里面不能放块级元素，特别是 <code>p</code> 标签不能放 <code>div</code>。同理还有这些标签<code>h1,h2,h3,h4,h5,h6,dt</code> ，他们都是文字类块级标签，里面不能放其他块级元素。</p><p>如果放了，那么 div 会自动被移出当前的 p 标签下</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 编写结果 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  222</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;111&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 实际渲染结果 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  222</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  111</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 编写结果 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  222</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;111&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 实际渲染结果 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  222</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  111</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="快-行内-行内块" tabindex="-1">快，行内，行内块 <a class="header-anchor" href="#快-行内-行内块" aria-label="Permalink to &quot;快，行内，行内块&quot;">​</a></h2><h3 id="_1-各自特点" tabindex="-1">1 各自特点 <a class="header-anchor" href="#_1-各自特点" aria-label="Permalink to &quot;1 各自特点&quot;">​</a></h3><p><strong>块级元素有什么特点？</strong></p><ul><li>自己独占一行</li><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的 <code>100%</code></li><li>是一个容器及盒子，里面可以放行内或者块级元素</li></ul><p><strong>行内元素有哪些特点？</strong></p><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>只可以设置水平方向的外边距</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或则其他行内元素</li></ul><p><strong>行内块元素有什么特点？</strong></p><ul><li>和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙，一行可以显示多个。</li><li>默认宽度就是它本身内容的宽度。</li><li>高度，行高、外边距以及内边距都可以控制。</li></ul>`,22),t=[e];function c(r,i,E,d,h,y){return a(),n("div",null,t)}const _=s(o,[["render",c]]);export{u as __pageData,_ as default};
